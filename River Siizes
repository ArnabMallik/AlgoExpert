import java.util.*;

class Program {
	
	static int row, col, length;
	static int visit[][];
  public static List<Integer> riverSizes(int[][] matrix) {
    // Write your code here.
		
		row = matrix.length;
		col = matrix[0].length;
		visit = new int[row][col];
		ArrayList<Integer> list = new ArrayList<Integer>();
		
		for(int i = 0; i < row; i++)
			Arrays.fill(visit[i], 0);
		
		for(int i = 0; i < row; i++){
			for(int j = 0; j < col; j++){
				length = 0;
				if(visit[i][j] == 0 && matrix[i][j] == 1){
					dfs(i, j, matrix);
					list.add(length);
				}		
			}
		}
    return list;
  }
	
	public static void dfs(int i, int j, int[][] matrix){
		
		int x, y;
		length++;
		visit[i][j] = 1;
		
		int xx[] = {-1,0,0,1};
		int yy[] = {0,-1,1,0};
		for(int k = 0; k < 4; k++){
			x = i + xx[k];
			y = j + yy[k];
			if(isValid(x, y) && visit[x][y] == 0 && matrix[x][y] == 1)
				dfs(x, y, matrix);
		}
	}
	
	public static boolean isValid(int i, int j){
		if(i >= 0 && i < row && j >= 0 && j < col)
			return true;
		else
			return false;
	}
}
